[{"C:\\Users\\m\\Desktop\\study\\project\\src\\index.js":"1","C:\\Users\\m\\Desktop\\study\\project\\src\\App.js":"2","C:\\Users\\m\\Desktop\\study\\project\\src\\reportWebVitals.js":"3","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\main.js":"4","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Main.js":"5","C:\\Users\\m\\Desktop\\study\\project\\src\\data.js":"6","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Board.js":"7","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\List.js":"8","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Result.js":"9","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTableColumn.js":"10","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTableRow.js":"11","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTable.js":"12","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\BoardDetail.js":"13"},{"size":670,"mtime":1695289140710,"results":"14","hashOfConfig":"15"},{"size":1444,"mtime":1697854387288,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1694824908233,"results":"17","hashOfConfig":"15"},{"size":99,"mtime":1694866899340,"results":"18","hashOfConfig":"15"},{"size":2915,"mtime":1697357921847,"results":"19","hashOfConfig":"15"},{"size":1926,"mtime":1695288559454,"results":"20","hashOfConfig":"15"},{"size":3930,"mtime":1697860451991,"results":"21","hashOfConfig":"15"},{"size":1765,"mtime":1697854616074,"results":"22","hashOfConfig":"15"},{"size":2385,"mtime":1697359780853,"results":"23","hashOfConfig":"15"},{"size":221,"mtime":1696475283560,"results":"24","hashOfConfig":"15"},{"size":215,"mtime":1696474889478,"results":"25","hashOfConfig":"15"},{"size":559,"mtime":1696474072562,"results":"26","hashOfConfig":"15"},{"size":2403,"mtime":1697935648608,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"p8ev4q",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\m\\Desktop\\study\\project\\src\\index.js",[],[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\App.js",["73","74","75","76"],[],"import {Navbar, Container, Nav} from 'react-bootstrap';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {Routes, Route , useNavigate} from 'react-router-dom'\nimport data from './data.js';\nimport Main from './routes/Main.js';\nimport Board from './routes/Board';\nimport List from './routes/List';\nimport Result from './routes/Result';\nimport React , { useEffect, useState} from 'react';\nimport BoardDetail from './routes/BoardDetail';\n\n\nfunction App() {\n  let navigate = useNavigate();\n\n  \n\n  return (\n    <div className=\"App\">\n       {/* <div className=\"black-nav\">\n        \n      </div> */}\n\n    \n\n\n      <Navbar bg=\"dark\" data-bs-theme=\"dark\">\n      <Container>\n        <Navbar.Brand href=\"#\">Home</Navbar.Brand>\n        <Nav className=\"me-auto\">\n        <Nav.Link onClick={()=>{navigate('/Main')}}>Test</Nav.Link>\n        <Nav.Link onClick={()=>{navigate('/Board')}}>글쓰기</Nav.Link>\n        <Nav.Link onClick={()=>{navigate('/List')}}>목록</Nav.Link>\n\n        </Nav>\n      </Container>\n      </Navbar> \n\n\n      <Routes>\n      <Route path=\"/Main\" element={<Main/>} />\n      <Route path=\"/Board\" element={<Board/>} />\n      <Route path='/List' element={<List/>} />\n      <Route path='/Result'  element={<Result/>}/>\n      <Route path=\"/Board/:id\"element={<BoardDetail/>}/>\n\n      </Routes>\n    {/* 라우터는 App.js에만 사용가능 */}\n    </div>\n  );\n}\n\n\nexport default App;","C:\\Users\\m\\Desktop\\study\\project\\src\\reportWebVitals.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\main.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Main.js",["77"],[],"import {  useState } from \"react\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport data from \"../data.js\";\r\nimport {  useNavigate } from 'react-router-dom';\r\nimport React from 'react';\r\n\r\n\r\nfunction Main() {\r\n  let [answer ,setAnswer] = useState([]);\r\n  let [num, setNum] = useState([]);\r\n  let [page, setPage] = useState(1);\r\n  let totalPage = 5; // 한 페이지에 표시할 질문의 수를 나타내는 변수\r\n  let [remain , zero] = useState(10);\r\n\r\n  let start = (page - 1) * totalPage;\r\n  let end = start + totalPage;\r\n  let curPage = data.slice(start, end);\r\n  const isLastPage = end >= data.length;\r\n  const isFristPage = start !== 0 ;\r\n  let navigate = useNavigate();\r\n\r\n\r\n  const nextPage = () => {\r\n    let ques = data\r\n      .slice(start, end)\r\n      .filter((test) => !answer[`${test.id}`]);\r\n\r\n    if (ques.length > 0) {\r\n      const num = ques.map((question) => question.id);\r\n      setNum(num);\r\n      alert(`${num.join(\", \")} 번 질문에 답변해주세요!`);\r\n    } else {\r\n      if (isLastPage) {\r\n       navigate('/Result' ,{\r\n        state : {\r\n          newArray\r\n        }\r\n       });\r\n      } else {\r\n        setPage(page + 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  const change = (questionId, value) => {\r\n    setAnswer({\r\n      ...answer,\r\n      [questionId]: value\r\n    });\r\n\r\n    if (!answer[questionId]) {\r\n      zero(remain -= 1)\r\n    }\r\n};\r\n\r\n\r\nlet newArray = Object.entries(answer);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* 각 문제의 라디오 버튼을 클릭하면 남은문제가 하나씩 줄어들게끔 해줘 */}\r\n      <div className='remainques'>남은문제 {remain}</div>\r\n      <br/>\r\n      <h1>스트레스 자가 진단</h1>\r\n      <br/>\r\n      {curPage.map(function (test) {\r\n        const questionId = `${test.id}`;\r\n        return (\r\n          <div key={questionId}>\r\n            <h4 >\r\n              {test.id}. {test.text}\r\n            </h4>\r\n            <br />\r\n            <h4>\r\n              <Form>\r\n                {['전혀', '가끔', '자주', '항상'].map((value) => (\r\n                  <label key={value} style={{ marginRight: '10px' }}>\r\n                    <Form.Check\r\n                      inline\r\n                      name={questionId}\r\n                      type=\"radio\"\r\n                      value={value}\r\n                      onChange={() => change(questionId, value)}\r\n                      checked={answer[questionId] === value}\r\n                    />\r\n                    {value}\r\n                  </label>\r\n                ))}\r\n              </Form>\r\n            </h4>\r\n            <br />\r\n          </div>\r\n        );\r\n      })}\r\n\r\n\r\n {isFristPage ? (\r\n    <button onClick={()=>{setPage(page-1)}}>이전</button>\r\n ) : null\r\n};\r\n\r\n      {isLastPage ? (\r\n        <button onClick={nextPage}>결과보기</button>\r\n\r\n      ) : (\r\n        <button onClick={nextPage}>다음</button>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Main;","C:\\Users\\m\\Desktop\\study\\project\\src\\data.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Board.js",["78","79"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useNavigate , useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Board() {\r\n  // 게시글 제목, 글쓴이, 내용, 그리고 선택한 파일을 관리할 상태 변수\r\n  let [no, setNo] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [who, setWho] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const navigate = useNavigate();\r\n  const [focus, setFocus] = useState('');\r\n  const { id } = useParams();\r\n  const today = new Date;\r\n  const date = `${today.getFullYear()}년 ${today.getMonth() + 1}월 ${today.getDate()}일`;\r\n\r\n\r\n  useEffect(() => {\r\n    const postNum = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:4000/getNum');\r\n        setNo(response.data);\r\n      } catch (error) {\r\n        console.error('게시글 번호를 가져오는 중 오류 발생:', error);\r\n      }\r\n    };\r\n    // 페이지가 로드될 때 게시글 번호를 가져오도록 설정\r\n    postNum();\r\n  }, []);\r\n\r\n  \r\n   \r\n  const Submit = async (e) => {\r\n    const newPost = {\r\n      no ,\r\n      title, who, content, date\r\n  };\r\n\r\n  console.log(newPost.no);\r\n\r\n  if(!title || !who || !content){\r\n    alert('모든 항목을 작성해주세요!')\r\n  } else {\r\n    try {\r\n      await axios.post(`http://localhost:4000/Board/${id}` , newPost);\r\n      alert('등록 완료!');\r\n      // 폼 초기화\r\n      setTitle('');\r\n      setWho('');\r\n      setContent('');\r\n      setNo(no + 1);\r\n    } catch (error) {\r\n      console.error('등록 중 오류 발생:', error);\r\n    }\r\n    navigate(`/Board/${newPost.no}`);\r\n  }\r\n  // 파라미터 7이면 그 해당 게시글 상세보기 화면이 떠야함\r\n\r\n};\r\n\r\n\r\n\r\n  return (\r\n    <div className='bar'>\r\n      <h1>글 작성</h1>\r\n      <form>\r\n      <div>\r\n          <div htmlFor=\"no\">글번호</div>\r\n          <input\r\n            type=\"text\"\r\n            id=\"no\"\r\n            value={no}\r\n            className='space'\r\n            readOnly\r\n          />\r\n        </div>\r\n        <div>\r\n          <div htmlFor=\"title\">제목</div>\r\n          <input\r\n            type=\"text\"\r\n            id=\"title\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            onFocus={() => setFocus('title')}\r\n            onBlur={() => setFocus('')}\r\n            className='space'\r\n          />\r\n            {focus == 'title' && !title && <div className='focus'>필수 항목입니다!</div>}\r\n        </div>\r\n        <div>\r\n          <div htmlFor=\"who\">글쓴이</div>\r\n          <input\r\n            type=\"text\"\r\n            id=\"who\"\r\n            value={who}\r\n            onChange={(e) => setWho(e.target.value)}\r\n            onFocus={() => setFocus('who')}\r\n            onBlur={() => setFocus('')}\r\n            className='space'\r\n          />\r\n          {focus === 'who' && !who && <div className='focus'>필수 항목입니다!</div>}\r\n        </div>\r\n        <div>\r\n          <div htmlFor=\"content\">내용</div>\r\n          <textarea\r\n            id=\"content\"\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n            onFocus={() => setFocus('content')}\r\n            onBlur={() => setFocus('')}\r\n            className='space1'\r\n          />\r\n          {focus === 'content' && !content && <div className='focus'>필수 항목입니다!</div>}\r\n        </div>\r\n        \r\n        {/* <div>\r\n          <input\r\n            type=\"file\"\r\n            id=\"file\"\r\n            accept=\"image/*\" // 이미지 파일만 허용하도록 설정\r\n            value={file}\r\n            onChange={(e) => setFile(e.target.value)}\r\n            className='space'\r\n          />\r\n        </div> */}\r\n        <button type=\"button\" style={{ width : 130 }} onClick={Submit}>\r\n          게시글 작성\r\n        </button>\r\n      </form>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\List.js",["80","81","82"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate , useParams } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n  function List(props) {\r\n    var [data, setData] = useState([]);\r\n    const [pcount , tcount] = useState(0);\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n      axios.get('http://localhost:4000/Board')\r\n      .then((response) => {\r\n        setData(response.data); // 서버에서 받은 데이터를 상태 변수에 저장\r\n        //console.log(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('데이터 가져오기 중 오류 발생:', error);\r\n      });\r\n    }, []); \r\n  \r\n\r\n\r\n  return (\r\n    <div>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>번호</th>\r\n            <th>제목</th>\r\n            {/* <th>내용</th> */}\r\n            <th>작성자</th>\r\n            <th>작성일자</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n    \r\n      {\r\n      Object.keys(data).map((a, i) => (\r\n      <tr key={i}>\r\n      <td>{data[a].BOARD_NO}</td>\r\n      <td>\r\n      <Link to={`/Board/${data[a].BOARD_NO}`}>{data[a].BOARD_TITLE}</Link>\r\n      {/* {data[a].BOARD_TITLE} */}\r\n      </td>\r\n      <td>{data[a].BOARD_NAME}</td>\r\n      <td>{data[a].BOARD_DATE}</td>\r\n      </tr>\r\n       ))}\r\n\r\n        </tbody>\r\n      </Table>\r\n      <Button variant=\"info\" onClick={()=>{navigate('/Board')}}>글쓰기</Button>\r\n      <Button variant=\"secondary\">수정하기</Button>\r\n      <Button variant=\"danger\">삭제하기</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Result.js",["83"],[],"import React, { useState , useEffect} from 'react';\r\nimport {useLocation} from 'react-router-dom';\r\nimport Board from './Board';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Result ()  {\r\n\r\n  const location = useLocation();\r\n  const newArray = location.state;\r\n\r\n//  //결과를 계산할 때 사용할 상태 변수\r\n  let [totalscore, setTotalScore] = useState(0);\r\n  let navigate = useNavigate();\r\n  \r\n  useEffect(()=>{\r\n      const newData = newArray.newArray;\r\n      \r\n      let score1 = 0;\r\n      let score2 = 0;\r\n      newData.forEach((item)=>{\r\n        const [questionN, value] = item;\r\n        \r\n        const spec = [4, 5, 7, 8];\r\n        if (spec.includes(Number(questionN))) {\r\n        switch (value) {\r\n          case '전혀':\r\n            score1 += 3;\r\n            break;\r\n          case '가끔':\r\n            score1 += 2;\r\n            break;\r\n          case '자주':\r\n            score1 += 1;\r\n            break;\r\n          case '항상':\r\n            score1 += 0;\r\n            break;\r\n          default:\r\n            score1 += 0;\r\n        }\r\n       }else {\r\n        switch (value) {\r\n              case '전혀':\r\n                score2 += 0;\r\n                break;\r\n              case '가끔':\r\n                score2 += 1;\r\n                break;\r\n              case '자주':\r\n                score2 += 2;\r\n                break;\r\n              case '항상':\r\n                score2 += 3;\r\n                break;\r\n              default:\r\n                score2 += 0;\r\n            }\r\n       }});\r\n      let totalscore = score1 + score2;\r\n      setTotalScore(totalscore);\r\n      // }\r\n    }, [newArray.newArray]);\r\n      \r\n    let resultText ;\r\n    if (totalscore <= 17) {\r\n      resultText = '정상';\r\n    } else if (totalscore >= 18 && totalscore <= 25) {\r\n      resultText = '경도의 스트레스';\r\n    } else {\r\n      resultText = '고도의 스트레스';\r\n    }\r\n\r\n     \r\n    return (\r\n      \r\n      <div>\r\n        <div style={{ fontSize : 28, textAlign : 'center', padding : '200px 0 '}}>\r\n          나의 스트레스 수준은 \r\n        <span style={{ color : 'blue' , fontWeight : 'bold' }}> {totalscore}점 </span> \r\n        입니다. <br/><br/>\r\n        {resultText}        \r\n         </div>\r\n\r\n        <button onClick={()=>{navigate('/Main')}}>돌아가기</button>\r\n\r\n      </div>\r\n\r\n    )\r\n\r\n  }\r\n  \r\n\r\nexport default Result;","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTableColumn.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTableRow.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTable.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\BoardDetail.js",["84","85","86","87","88"],[],{"ruleId":"89","severity":1,"message":"90","line":2,"column":8,"nodeType":"91","messageId":"92","endLine":2,"endColumn":12},{"ruleId":"89","severity":1,"message":"93","line":6,"column":8,"nodeType":"91","messageId":"92","endLine":6,"endColumn":12},{"ruleId":"89","severity":1,"message":"94","line":11,"column":18,"nodeType":"91","messageId":"92","endLine":11,"endColumn":27},{"ruleId":"89","severity":1,"message":"95","line":11,"column":29,"nodeType":"91","messageId":"92","endLine":11,"endColumn":37},{"ruleId":"89","severity":1,"message":"96","line":10,"column":8,"nodeType":"91","messageId":"92","endLine":10,"endColumn":11},{"ruleId":"97","severity":1,"message":"98","line":15,"column":17,"nodeType":"99","messageId":"100","endLine":15,"endColumn":25,"fix":"101"},{"ruleId":"102","severity":1,"message":"103","line":89,"column":20,"nodeType":"104","messageId":"105","endLine":89,"endColumn":22},{"ruleId":"89","severity":1,"message":"106","line":10,"column":12,"nodeType":"91","messageId":"92","endLine":10,"endColumn":18},{"ruleId":"89","severity":1,"message":"107","line":10,"column":21,"nodeType":"91","messageId":"92","endLine":10,"endColumn":27},{"ruleId":"89","severity":1,"message":"108","line":11,"column":13,"nodeType":"91","messageId":"92","endLine":11,"endColumn":15},{"ruleId":"89","severity":1,"message":"109","line":3,"column":8,"nodeType":"91","messageId":"92","endLine":3,"endColumn":13},{"ruleId":"89","severity":1,"message":"110","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":14},{"ruleId":"89","severity":1,"message":"111","line":3,"column":10,"nodeType":"91","messageId":"92","endLine":3,"endColumn":21},{"ruleId":"89","severity":1,"message":"112","line":3,"column":24,"nodeType":"91","messageId":"92","endLine":3,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":26,"column":6,"nodeType":"115","endLine":26,"endColumn":8,"suggestions":"116"},{"ruleId":"113","severity":1,"message":"117","line":39,"column":10,"nodeType":"115","endLine":39,"endColumn":12,"suggestions":"118"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'data' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'num' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"119","text":"120"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'pcount' is assigned a value but never used.","'tcount' is assigned a value but never used.","'id' is assigned a value but never used.","'Board' is defined but never used.","'Link' is defined but never used.","'useNavigate' is defined but never used.","'useLocation' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'viewCount'. Either include them or remove the dependency array. You can also do a functional update 'setCount(v => ...)' if you only need 'viewCount' in the 'setCount' call.","ArrayExpression",["121"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["122"],[508,508],"()",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [id, viewCount]",{"range":"127","text":"128"},"Update the dependencies array to be: [id]",{"range":"129","text":"130"},[652,654],"[id, viewCount]",[995,997],"[id]"]