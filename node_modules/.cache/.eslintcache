[{"C:\\Users\\m\\Desktop\\study\\project\\src\\index.js":"1","C:\\Users\\m\\Desktop\\study\\project\\src\\App.js":"2","C:\\Users\\m\\Desktop\\study\\project\\src\\reportWebVitals.js":"3","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\main.js":"4","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Main.js":"5","C:\\Users\\m\\Desktop\\study\\project\\src\\data.js":"6","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Board.js":"7","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\List.js":"8","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Result.js":"9","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTableColumn.js":"10","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTableRow.js":"11","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTable.js":"12","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\BoardDetail.js":"13"},{"size":670,"mtime":1697944798843,"results":"14","hashOfConfig":"15"},{"size":1444,"mtime":1697944798824,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1697944798853,"results":"17","hashOfConfig":"15"},{"size":99,"mtime":1694866899340,"results":"18","hashOfConfig":"15"},{"size":2800,"mtime":1697944798895,"results":"19","hashOfConfig":"15"},{"size":1840,"mtime":1697944798833,"results":"20","hashOfConfig":"15"},{"size":3795,"mtime":1697944798858,"results":"21","hashOfConfig":"15"},{"size":1703,"mtime":1697944798890,"results":"22","hashOfConfig":"15"},{"size":2293,"mtime":1697944798900,"results":"23","hashOfConfig":"15"},{"size":221,"mtime":1696475283560,"results":"24","hashOfConfig":"15"},{"size":215,"mtime":1696474889478,"results":"25","hashOfConfig":"15"},{"size":559,"mtime":1696474072562,"results":"26","hashOfConfig":"15"},{"size":2403,"mtime":1697954051201,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p8ev4q",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\m\\Desktop\\study\\project\\src\\index.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\App.js",["72","73","74","75"],[],"import {Navbar, Container, Nav} from 'react-bootstrap';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {Routes, Route , useNavigate} from 'react-router-dom'\nimport data from './data.js';\nimport Main from './routes/Main.js';\nimport Board from './routes/Board';\nimport List from './routes/List';\nimport Result from './routes/Result';\nimport React , { useEffect, useState} from 'react';\nimport BoardDetail from './routes/BoardDetail';\n\n\nfunction App() {\n  let navigate = useNavigate();\n\n  \n\n  return (\n    <div className=\"App\">\n       {/* <div className=\"black-nav\">\n        \n      </div> */}\n\n    \n\n\n      <Navbar bg=\"dark\" data-bs-theme=\"dark\">\n      <Container>\n        <Navbar.Brand href=\"#\">Home</Navbar.Brand>\n        <Nav className=\"me-auto\">\n        <Nav.Link onClick={()=>{navigate('/Main')}}>Test</Nav.Link>\n        <Nav.Link onClick={()=>{navigate('/Board')}}>글쓰기</Nav.Link>\n        <Nav.Link onClick={()=>{navigate('/List')}}>목록</Nav.Link>\n\n        </Nav>\n      </Container>\n      </Navbar> \n\n\n      <Routes>\n      <Route path=\"/Main\" element={<Main/>} />\n      <Route path=\"/Board\" element={<Board/>} />\n      <Route path='/List' element={<List/>} />\n      <Route path='/Result'  element={<Result/>}/>\n      <Route path=\"/Board/:id\"element={<BoardDetail/>}/>\n\n      </Routes>\n    {/* 라우터는 App.js에만 사용가능 */}\n    </div>\n  );\n}\n\n\nexport default App;","C:\\Users\\m\\Desktop\\study\\project\\src\\reportWebVitals.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\main.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Main.js",["76"],[],"import {  useState } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport data from \"../data.js\";\nimport {  useNavigate } from 'react-router-dom';\nimport React from 'react';\n\n\nfunction Main() {\n  let [answer ,setAnswer] = useState([]);\n  let [num, setNum] = useState([]);\n  let [page, setPage] = useState(1);\n  let totalPage = 5; // 한 페이지에 표시할 질문의 수를 나타내는 변수\n  let [remain , zero] = useState(10);\n\n  let start = (page - 1) * totalPage;\n  let end = start + totalPage;\n  let curPage = data.slice(start, end);\n  const isLastPage = end >= data.length;\n  const isFristPage = start !== 0 ;\n  let navigate = useNavigate();\n\n\n  const nextPage = () => {\n    let ques = data\n      .slice(start, end)\n      .filter((test) => !answer[`${test.id}`]);\n\n    if (ques.length > 0) {\n      const num = ques.map((question) => question.id);\n      setNum(num);\n      alert(`${num.join(\", \")} 번 질문에 답변해주세요!`);\n    } else {\n      if (isLastPage) {\n       navigate('/Result' ,{\n        state : {\n          newArray\n        }\n       });\n      } else {\n        setPage(page + 1);\n      }\n    }\n  }\n\n  const change = (questionId, value) => {\n    setAnswer({\n      ...answer,\n      [questionId]: value\n    });\n\n    if (!answer[questionId]) {\n      zero(remain -= 1)\n    }\n};\n\n\nlet newArray = Object.entries(answer);\n\n\n\n  return (\n    <div>\n      {/* 각 문제의 라디오 버튼을 클릭하면 남은문제가 하나씩 줄어들게끔 해줘 */}\n      <div className='remainques'>남은문제 {remain}</div>\n      <br/>\n      <h1>스트레스 자가 진단</h1>\n      <br/>\n      {curPage.map(function (test) {\n        const questionId = `${test.id}`;\n        return (\n          <div key={questionId}>\n            <h4 >\n              {test.id}. {test.text}\n            </h4>\n            <br />\n            <h4>\n              <Form>\n                {['전혀', '가끔', '자주', '항상'].map((value) => (\n                  <label key={value} style={{ marginRight: '10px' }}>\n                    <Form.Check\n                      inline\n                      name={questionId}\n                      type=\"radio\"\n                      value={value}\n                      onChange={() => change(questionId, value)}\n                      checked={answer[questionId] === value}\n                    />\n                    {value}\n                  </label>\n                ))}\n              </Form>\n            </h4>\n            <br />\n          </div>\n        );\n      })}\n\n\n {isFristPage ? (\n    <button onClick={()=>{setPage(page-1)}}>이전</button>\n ) : null\n};\n\n      {isLastPage ? (\n        <button onClick={nextPage}>결과보기</button>\n\n      ) : (\n        <button onClick={nextPage}>다음</button>\n      )}\n\n    </div>\n  );\n}\n\n\nexport default Main;","C:\\Users\\m\\Desktop\\study\\project\\src\\data.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Board.js",["77","78"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate , useParams } from 'react-router-dom';\nimport axios from 'axios';\n\n\nfunction Board() {\n  // 게시글 제목, 글쓴이, 내용, 그리고 선택한 파일을 관리할 상태 변수\n  let [no, setNo] = useState('');\n  const [title, setTitle] = useState('');\n  const [who, setWho] = useState('');\n  const [content, setContent] = useState('');\n  const navigate = useNavigate();\n  const [focus, setFocus] = useState('');\n  const { id } = useParams();\n  const today = new Date;\n  const date = `${today.getFullYear()}년 ${today.getMonth() + 1}월 ${today.getDate()}일`;\n\n\n  useEffect(() => {\n    const postNum = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/getNum');\n        setNo(response.data);\n      } catch (error) {\n        console.error('게시글 번호를 가져오는 중 오류 발생:', error);\n      }\n    };\n    // 페이지가 로드될 때 게시글 번호를 가져오도록 설정\n    postNum();\n  }, []);\n\n  \n   \n  const Submit = async (e) => {\n    const newPost = {\n      no ,\n      title, who, content, date\n  };\n\n  console.log(newPost.no);\n\n  if(!title || !who || !content){\n    alert('모든 항목을 작성해주세요!')\n  } else {\n    try {\n      await axios.post(`http://localhost:4000/Board/${id}` , newPost);\n      alert('등록 완료!');\n      // 폼 초기화\n      setTitle('');\n      setWho('');\n      setContent('');\n      setNo(no + 1);\n    } catch (error) {\n      console.error('등록 중 오류 발생:', error);\n    }\n    navigate(`/Board/${newPost.no}`);\n  }\n  // 파라미터 7이면 그 해당 게시글 상세보기 화면이 떠야함\n\n};\n\n\n\n  return (\n    <div className='bar'>\n      <h1>글 작성</h1>\n      <form>\n      <div>\n          <div htmlFor=\"no\">글번호</div>\n          <input\n            type=\"text\"\n            id=\"no\"\n            value={no}\n            className='space'\n            readOnly\n          />\n        </div>\n        <div>\n          <div htmlFor=\"title\">제목</div>\n          <input\n            type=\"text\"\n            id=\"title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            onFocus={() => setFocus('title')}\n            onBlur={() => setFocus('')}\n            className='space'\n          />\n            {focus == 'title' && !title && <div className='focus'>필수 항목입니다!</div>}\n        </div>\n        <div>\n          <div htmlFor=\"who\">글쓴이</div>\n          <input\n            type=\"text\"\n            id=\"who\"\n            value={who}\n            onChange={(e) => setWho(e.target.value)}\n            onFocus={() => setFocus('who')}\n            onBlur={() => setFocus('')}\n            className='space'\n          />\n          {focus === 'who' && !who && <div className='focus'>필수 항목입니다!</div>}\n        </div>\n        <div>\n          <div htmlFor=\"content\">내용</div>\n          <textarea\n            id=\"content\"\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            onFocus={() => setFocus('content')}\n            onBlur={() => setFocus('')}\n            className='space1'\n          />\n          {focus === 'content' && !content && <div className='focus'>필수 항목입니다!</div>}\n        </div>\n        \n        {/* <div>\n          <input\n            type=\"file\"\n            id=\"file\"\n            accept=\"image/*\" // 이미지 파일만 허용하도록 설정\n            value={file}\n            onChange={(e) => setFile(e.target.value)}\n            className='space'\n          />\n        </div> */}\n        <button type=\"button\" style={{ width : 130 }} onClick={Submit}>\n          게시글 작성\n        </button>\n      </form>\n      \n    </div>\n  );\n}\n\nexport default Board;","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\List.js",["79","80","81"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate , useParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\nimport {Link} from \"react-router-dom\";\n\n  function List(props) {\n    var [data, setData] = useState([]);\n    const [pcount , tcount] = useState(0);\n    const { id } = useParams();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n      axios.get('http://localhost:4000/Board')\n      .then((response) => {\n        setData(response.data); // 서버에서 받은 데이터를 상태 변수에 저장\n        //console.log(response.data);\n      })\n      .catch((error) => {\n        console.error('데이터 가져오기 중 오류 발생:', error);\n      });\n    }, []); \n  \n\n\n  return (\n    <div>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>번호</th>\n            <th>제목</th>\n            {/* <th>내용</th> */}\n            <th>작성자</th>\n            <th>작성일자</th>\n          </tr>\n        </thead>\n        <tbody>\n    \n      {\n      Object.keys(data).map((a, i) => (\n      <tr key={i}>\n      <td>{data[a].BOARD_NO}</td>\n      <td>\n      <Link to={`/Board/${data[a].BOARD_NO}`}>{data[a].BOARD_TITLE}</Link>\n      {/* {data[a].BOARD_TITLE} */}\n      </td>\n      <td>{data[a].BOARD_NAME}</td>\n      <td>{data[a].BOARD_DATE}</td>\n      </tr>\n       ))}\n\n        </tbody>\n      </Table>\n      <Button variant=\"info\" onClick={()=>{navigate('/Board')}}>글쓰기</Button>\n      <Button variant=\"secondary\">수정하기</Button>\n      <Button variant=\"danger\">삭제하기</Button>\n    </div>\n  );\n}\n\nexport default List;","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\Result.js",["82"],[],"import React, { useState , useEffect} from 'react';\nimport {useLocation} from 'react-router-dom';\nimport Board from './Board';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Result ()  {\n\n  const location = useLocation();\n  const newArray = location.state;\n\n//  //결과를 계산할 때 사용할 상태 변수\n  let [totalscore, setTotalScore] = useState(0);\n  let navigate = useNavigate();\n  \n  useEffect(()=>{\n      const newData = newArray.newArray;\n      \n      let score1 = 0;\n      let score2 = 0;\n      newData.forEach((item)=>{\n        const [questionN, value] = item;\n        \n        const spec = [4, 5, 7, 8];\n        if (spec.includes(Number(questionN))) {\n        switch (value) {\n          case '전혀':\n            score1 += 3;\n            break;\n          case '가끔':\n            score1 += 2;\n            break;\n          case '자주':\n            score1 += 1;\n            break;\n          case '항상':\n            score1 += 0;\n            break;\n          default:\n            score1 += 0;\n        }\n       }else {\n        switch (value) {\n              case '전혀':\n                score2 += 0;\n                break;\n              case '가끔':\n                score2 += 1;\n                break;\n              case '자주':\n                score2 += 2;\n                break;\n              case '항상':\n                score2 += 3;\n                break;\n              default:\n                score2 += 0;\n            }\n       }});\n      let totalscore = score1 + score2;\n      setTotalScore(totalscore);\n      // }\n    }, [newArray.newArray]);\n      \n    let resultText ;\n    if (totalscore <= 17) {\n      resultText = '정상';\n    } else if (totalscore >= 18 && totalscore <= 25) {\n      resultText = '경도의 스트레스';\n    } else {\n      resultText = '고도의 스트레스';\n    }\n\n     \n    return (\n      \n      <div>\n        <div style={{ fontSize : 28, textAlign : 'center', padding : '200px 0 '}}>\n          나의 스트레스 수준은 \n        <span style={{ color : 'blue' , fontWeight : 'bold' }}> {totalscore}점 </span> \n        입니다. <br/><br/>\n        {resultText}        \n         </div>\n\n        <button onClick={()=>{navigate('/Main')}}>돌아가기</button>\n\n      </div>\n\n    )\n\n  }\n  \n\nexport default Result;","C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTableColumn.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTableRow.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\CommonTable.js",[],[],"C:\\Users\\m\\Desktop\\study\\project\\src\\routes\\BoardDetail.js",["83","84","85","86","87"],[],{"ruleId":"88","severity":1,"message":"89","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":12},{"ruleId":"88","severity":1,"message":"92","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":12},{"ruleId":"88","severity":1,"message":"93","line":11,"column":18,"nodeType":"90","messageId":"91","endLine":11,"endColumn":27},{"ruleId":"88","severity":1,"message":"94","line":11,"column":29,"nodeType":"90","messageId":"91","endLine":11,"endColumn":37},{"ruleId":"88","severity":1,"message":"95","line":10,"column":8,"nodeType":"90","messageId":"91","endLine":10,"endColumn":11},{"ruleId":"96","severity":1,"message":"97","line":15,"column":17,"nodeType":"98","messageId":"99","endLine":15,"endColumn":25,"fix":"100"},{"ruleId":"101","severity":1,"message":"102","line":89,"column":20,"nodeType":"103","messageId":"104","endLine":89,"endColumn":22},{"ruleId":"88","severity":1,"message":"105","line":10,"column":12,"nodeType":"90","messageId":"91","endLine":10,"endColumn":18},{"ruleId":"88","severity":1,"message":"106","line":10,"column":21,"nodeType":"90","messageId":"91","endLine":10,"endColumn":27},{"ruleId":"88","severity":1,"message":"107","line":11,"column":13,"nodeType":"90","messageId":"91","endLine":11,"endColumn":15},{"ruleId":"88","severity":1,"message":"108","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":13},{"ruleId":"88","severity":1,"message":"109","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":14},{"ruleId":"88","severity":1,"message":"110","line":3,"column":10,"nodeType":"90","messageId":"91","endLine":3,"endColumn":21},{"ruleId":"88","severity":1,"message":"111","line":3,"column":24,"nodeType":"90","messageId":"91","endLine":3,"endColumn":35},{"ruleId":"112","severity":1,"message":"113","line":26,"column":6,"nodeType":"114","endLine":26,"endColumn":8,"suggestions":"115"},{"ruleId":"112","severity":1,"message":"116","line":39,"column":10,"nodeType":"114","endLine":39,"endColumn":12,"suggestions":"117"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'data' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'num' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"118","text":"119"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'pcount' is assigned a value but never used.","'tcount' is assigned a value but never used.","'id' is assigned a value but never used.","'Board' is defined but never used.","'Link' is defined but never used.","'useNavigate' is defined but never used.","'useLocation' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'viewCount'. Either include them or remove the dependency array. You can also do a functional update 'setCount(v => ...)' if you only need 'viewCount' in the 'setCount' call.","ArrayExpression",["120"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["121"],[494,494],"()",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [id, viewCount]",{"range":"126","text":"127"},"Update the dependencies array to be: [id]",{"range":"128","text":"129"},[652,654],"[id, viewCount]",[995,997],"[id]"]