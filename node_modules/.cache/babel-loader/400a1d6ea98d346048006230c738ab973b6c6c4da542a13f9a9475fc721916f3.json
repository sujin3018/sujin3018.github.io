{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Main from './Main';\nimport { useLocation } from 'react-router-dom';\nfunction Result(props) {\n  _s();\n  const location = useLocation();\n  const newArray = location.state;\n  console.log(newArray);\n\n  //  //결과를 계산할 때 사용할 상태 변수\n  let [totalscore, setTotalScore] = useState(0);\n  const spec = [4, 5, 7, 8];\n  let score = 0;\n  useEffect(() => {\n    let score = 0;\n    newArray.map(item => {\n      const [, value] = item; // 인덱스 값은 사용하지 않으므로 무시합니다.\n\n      switch (value) {\n        case '전혀':\n          score += 3;\n          break;\n        case '가끔':\n          score += 2;\n          break;\n        case '자주':\n          score += 1;\n          break;\n        case '항상':\n          score += 0;\n          break;\n        default:\n          score += 0;\n      }\n    });\n\n    // 이전 상태를 기반으로 새로운 상태를 계산하여 업데이트\n    setTotalScore(prevTotalScore => prevTotalScore + score);\n  }, [newArray]);\n  console.log(setTotalScore);\n}\n_s(Result, \"CfF+yyM5ESErQlBd7JwwKXmlhGM=\", false, function () {\n  return [useLocation];\n});\n_c = Result;\nexport default Result;\nvar _c;\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"names":["React","useState","useEffect","Main","useLocation","Result","props","_s","location","newArray","state","console","log","totalscore","setTotalScore","spec","score","map","item","value","prevTotalScore","_c","$RefreshReg$"],"sources":["C:/Users/m/Desktop/study/project/src/routes/Result.js"],"sourcesContent":["import React, { useState , useEffect} from 'react';\r\nimport Main from './Main';\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nfunction Result (props)  {\r\n\r\n  const location = useLocation();\r\n\r\n  const newArray = location.state;\r\n  console.log(newArray);\r\n\r\n//  //결과를 계산할 때 사용할 상태 변수\r\n  let [totalscore, setTotalScore] = useState(0);\r\n  \r\n    const spec = [4, 5, 7, 8];\r\n\r\n    let score = 0;\r\n\r\n    useEffect(() => {\r\n      let score = 0;\r\n    \r\n      newArray.map((item) => {\r\n        const [, value] = item; // 인덱스 값은 사용하지 않으므로 무시합니다.\r\n        \r\n        switch (value) {\r\n          case '전혀':\r\n            score += 3;\r\n            break;\r\n          case '가끔':\r\n            score += 2;\r\n            break;\r\n          case '자주':\r\n            score += 1;\r\n            break;\r\n          case '항상':\r\n            score += 0;\r\n            break;\r\n          default:\r\n            score += 0;\r\n        }\r\n      });\r\n    \r\n      // 이전 상태를 기반으로 새로운 상태를 계산하여 업데이트\r\n      setTotalScore((prevTotalScore) => prevTotalScore + score);\r\n    }, [newArray]);\r\n\r\n\r\n    console.log(setTotalScore);\r\n  }\r\n  \r\nexport default Result;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAGC,SAAS,QAAO,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAAQC,WAAW,QAAO,kBAAkB;AAE5C,SAASC,MAAMA,CAAEC,KAAK,EAAG;EAAAC,EAAA;EAEvB,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAE9B,MAAMK,QAAQ,GAAGD,QAAQ,CAACE,KAAK;EAC/BC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;;EAEvB;EACE,IAAI,CAACI,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAMc,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAEzB,IAAIC,KAAK,GAAG,CAAC;EAEbd,SAAS,CAAC,MAAM;IACd,IAAIc,KAAK,GAAG,CAAC;IAEbP,QAAQ,CAACQ,GAAG,CAAEC,IAAI,IAAK;MACrB,MAAM,GAAGC,KAAK,CAAC,GAAGD,IAAI,CAAC,CAAC;;MAExB,QAAQC,KAAK;QACX,KAAK,IAAI;UACPH,KAAK,IAAI,CAAC;UACV;QACF,KAAK,IAAI;UACPA,KAAK,IAAI,CAAC;UACV;QACF,KAAK,IAAI;UACPA,KAAK,IAAI,CAAC;UACV;QACF,KAAK,IAAI;UACPA,KAAK,IAAI,CAAC;UACV;QACF;UACEA,KAAK,IAAI,CAAC;MACd;IACF,CAAC,CAAC;;IAEF;IACAF,aAAa,CAAEM,cAAc,IAAKA,cAAc,GAAGJ,KAAK,CAAC;EAC3D,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAGdE,OAAO,CAACC,GAAG,CAACE,aAAa,CAAC;AAC5B;AAACP,EAAA,CA5CMF,MAAM;EAAA,QAEID,WAAW;AAAA;AAAAiB,EAAA,GAFrBhB,MAAM;AA8Cf,eAAeA,MAAM;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}