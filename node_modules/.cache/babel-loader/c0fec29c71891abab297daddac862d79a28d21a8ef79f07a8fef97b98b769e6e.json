{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Main from './Main';\nimport { useLocation } from 'react-router-dom';\nfunction Result(props) {\n  _s();\n  const location = useLocation();\n  const newArray = location.state;\n  console.log(newArray);\n\n  // 결과를 계산할 때 사용할 상태 변수\n  const [totalscore, setTotalScore] = useState(0);\n  const spec = [4, 5, 7, 8];\n  useEffect(() => {\n    let score = 0;\n\n    // newArray가 배열인 경우에 대한 로직을 추가해야 합니다.\n    // newArray와 spec 배열의 요소를 비교하여 점수를 계산하세요.\n\n    // 예시 코드 (수정 필요):\n    newArray.forEach(item => {\n      const [index, value] = item;\n      if (spec.includes(Number(index))) {\n        switch (value) {\n          case '전혀':\n            score += 3;\n            break;\n          case '가끔':\n            score += 2;\n            break;\n          case '자주':\n            score += 1;\n            break;\n          case '항상':\n            score += 0;\n            break;\n          default:\n            score += 0;\n        }\n      } else {\n        switch (value) {\n          case '전혀':\n            score += 0;\n            break;\n          case '가끔':\n            score += 1;\n            break;\n          case '자주':\n            score += 2;\n            break;\n          case '항상':\n            score += 3;\n            break;\n          default:\n            score += 0;\n        }\n      }\n    });\n\n    // 새로 계산된 score를 이용해 totalscore를 업데이트\n    setTotalScore(score);\n  }, [newArray]);\n  console.log(totalscore); // totalscore 출력\n}\n_s(Result, \"CfF+yyM5ESErQlBd7JwwKXmlhGM=\", false, function () {\n  return [useLocation];\n});\n_c = Result;\nexport default Result;\nvar _c;\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"names":["React","useState","useEffect","Main","useLocation","Result","props","_s","location","newArray","state","console","log","totalscore","setTotalScore","spec","score","forEach","item","index","value","includes","Number","_c","$RefreshReg$"],"sources":["C:/Users/m/Desktop/study/project/src/routes/Result.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Main from './Main';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction Result(props) {\r\n  const location = useLocation();\r\n  const newArray = location.state;\r\n  console.log(newArray);\r\n\r\n  // 결과를 계산할 때 사용할 상태 변수\r\n  const [totalscore, setTotalScore] = useState(0);\r\n\r\n  const spec = [4, 5, 7, 8];\r\n\r\n  useEffect(() => {\r\n    let score = 0;\r\n    \r\n    // newArray가 배열인 경우에 대한 로직을 추가해야 합니다.\r\n    // newArray와 spec 배열의 요소를 비교하여 점수를 계산하세요.\r\n    \r\n    // 예시 코드 (수정 필요):\r\n    newArray.forEach((item) => {\r\n      const [index, value] = item;\r\n      if (spec.includes(Number(index))) {\r\n        switch (value) {\r\n          case '전혀':\r\n            score += 3;\r\n            break;\r\n          case '가끔':\r\n            score += 2;\r\n            break;\r\n          case '자주':\r\n            score += 1;\r\n            break;\r\n          case '항상':\r\n            score += 0;\r\n            break;\r\n          default:\r\n            score += 0;\r\n        }\r\n      } else {\r\n        switch (value) {\r\n          case '전혀':\r\n            score += 0;\r\n            break;\r\n          case '가끔':\r\n            score += 1;\r\n            break;\r\n          case '자주':\r\n            score += 2;\r\n            break;\r\n          case '항상':\r\n            score += 3;\r\n            break;\r\n          default:\r\n            score += 0;\r\n        }\r\n      }\r\n    });\r\n\r\n    // 새로 계산된 score를 이용해 totalscore를 업데이트\r\n    setTotalScore(score);\r\n  }, [newArray]);\r\n\r\n  console.log(totalscore); // totalscore 출력\r\n  }\r\n  \r\nexport default Result;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,SAASC,MAAMA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAC9B,MAAMK,QAAQ,GAAGD,QAAQ,CAACE,KAAK;EAC/BC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;;EAErB;EACA,MAAM,CAACI,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAE/C,MAAMc,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAEzBb,SAAS,CAAC,MAAM;IACd,IAAIc,KAAK,GAAG,CAAC;;IAEb;IACA;;IAEA;IACAP,QAAQ,CAACQ,OAAO,CAAEC,IAAI,IAAK;MACzB,MAAM,CAACC,KAAK,EAAEC,KAAK,CAAC,GAAGF,IAAI;MAC3B,IAAIH,IAAI,CAACM,QAAQ,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,EAAE;QAChC,QAAQC,KAAK;UACX,KAAK,IAAI;YACPJ,KAAK,IAAI,CAAC;YACV;UACF,KAAK,IAAI;YACPA,KAAK,IAAI,CAAC;YACV;UACF,KAAK,IAAI;YACPA,KAAK,IAAI,CAAC;YACV;UACF,KAAK,IAAI;YACPA,KAAK,IAAI,CAAC;YACV;UACF;YACEA,KAAK,IAAI,CAAC;QACd;MACF,CAAC,MAAM;QACL,QAAQI,KAAK;UACX,KAAK,IAAI;YACPJ,KAAK,IAAI,CAAC;YACV;UACF,KAAK,IAAI;YACPA,KAAK,IAAI,CAAC;YACV;UACF,KAAK,IAAI;YACPA,KAAK,IAAI,CAAC;YACV;UACF,KAAK,IAAI;YACPA,KAAK,IAAI,CAAC;YACV;UACF;YACEA,KAAK,IAAI,CAAC;QACd;MACF;IACF,CAAC,CAAC;;IAEF;IACAF,aAAa,CAACE,KAAK,CAAC;EACtB,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEdE,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC;AACzB;AAACN,EAAA,CA7DMF,MAAM;EAAA,QACID,WAAW;AAAA;AAAAmB,EAAA,GADrBlB,MAAM;AA+Df,eAAeA,MAAM;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}